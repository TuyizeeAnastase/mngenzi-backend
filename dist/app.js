"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _express = _interopRequireDefault(require("express"));
var _cors = _interopRequireDefault(require("cors"));
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _morgan = _interopRequireDefault(require("morgan"));
var _routers = _interopRequireDefault(require("./routers"));
var _dotenv = _interopRequireDefault(require("dotenv"));
var _expressFileupload = _interopRequireDefault(require("express-fileupload"));
var _cloudinary = _interopRequireDefault(require("cloudinary"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
_dotenv["default"].config();
var app = (0, _express["default"])();
var PORT = process.env.PORT || 3000;
_cloudinary["default"].config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
  secure: true
});
app.use((0, _expressFileupload["default"])({
  useTempFiles: true
}));
app.use(_express["default"].json());
app.use(_bodyParser["default"].urlencoded({
  extended: false
}));
app.use((0, _morgan["default"])("tiny"));
app.use((0, _cors["default"])());
app.use(_routers["default"]);
var server = app.listen(PORT, console.log("Server listening on ".concat(PORT)));
process.on("unhandledRejection", function (err, promise) {
  server.close(function () {
    return process.exit(1);
  });
});
var _default = exports["default"] = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NvcnMiLCJfYm9keVBhcnNlciIsIl9tb3JnYW4iLCJfcm91dGVycyIsIl9kb3RlbnYiLCJfZXhwcmVzc0ZpbGV1cGxvYWQiLCJfY2xvdWRpbmFyeSIsImUiLCJfX2VzTW9kdWxlIiwiZG90ZW52IiwiY29uZmlnIiwiYXBwIiwiZXhwcmVzcyIsIlBPUlQiLCJwcm9jZXNzIiwiZW52IiwiY2xvYWRpbmFyeSIsImNsb3VkX25hbWUiLCJDTE9VRElOQVJZX0NMT1VEX05BTUUiLCJhcGlfa2V5IiwiQ0xPVURJTkFSWV9BUElfS0VZIiwiYXBpX3NlY3JldCIsIkNMT1VESU5BUllfQVBJX1NFQ1JFVCIsInNlY3VyZSIsInVzZSIsImZpbGV1cGxvYWQiLCJ1c2VUZW1wRmlsZXMiLCJqc29uIiwiYm9keXBhcnNlciIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsIm1vcmdhbiIsImNvcnMiLCJyb3V0ZXMiLCJzZXJ2ZXIiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiY29uY2F0Iiwib24iLCJlcnIiLCJwcm9taXNlIiwiY2xvc2UiLCJleGl0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xyXG5pbXBvcnQgY29ycyBmcm9tICdjb3JzJ1xyXG5pbXBvcnQgYm9keXBhcnNlciBmcm9tICdib2R5LXBhcnNlcidcclxuaW1wb3J0IG1vcmdhbiBmcm9tICdtb3JnYW4nXHJcbmltcG9ydCByb3V0ZXMgZnJvbSAnLi9yb3V0ZXJzJ1xyXG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudidcclxuaW1wb3J0IGZpbGV1cGxvYWQgZnJvbSBcImV4cHJlc3MtZmlsZXVwbG9hZFwiO1xyXG5pbXBvcnQgY2xvYWRpbmFyeSBmcm9tIFwiY2xvdWRpbmFyeVwiO1xyXG5cclxuZG90ZW52LmNvbmZpZygpO1xyXG5cclxuY29uc3QgYXBwPWV4cHJlc3MoKVxyXG5cclxuY29uc3QgUE9SVD1wcm9jZXNzLmVudi5QT1JUIHx8IDMwMDBcclxuXHJcblxyXG5cclxuY2xvYWRpbmFyeS5jb25maWcoe1xyXG4gICAgY2xvdWRfbmFtZTogcHJvY2Vzcy5lbnYuQ0xPVURJTkFSWV9DTE9VRF9OQU1FLFxyXG4gICAgYXBpX2tleTogcHJvY2Vzcy5lbnYuQ0xPVURJTkFSWV9BUElfS0VZLFxyXG4gICAgYXBpX3NlY3JldDogcHJvY2Vzcy5lbnYuQ0xPVURJTkFSWV9BUElfU0VDUkVULFxyXG4gICAgc2VjdXJlOiB0cnVlLFxyXG4gIH0pO1xyXG5cclxuYXBwLnVzZShmaWxldXBsb2FkKHsgdXNlVGVtcEZpbGVzOiB0cnVlIH0pKTtcclxuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XHJcbmFwcC51c2UoYm9keXBhcnNlci51cmxlbmNvZGVkKHtleHRlbmRlZDpmYWxzZX0pKTtcclxuYXBwLnVzZShtb3JnYW4oXCJ0aW55XCIpKTtcclxuYXBwLnVzZShjb3JzKCkpO1xyXG5hcHAudXNlKHJvdXRlcylcclxuY29uc3Qgc2VydmVyPWFwcC5saXN0ZW4oUE9SVCxjb25zb2xlLmxvZyhgU2VydmVyIGxpc3RlbmluZyBvbiAke1BPUlR9YCkpXHJcbnByb2Nlc3Mub24oXCJ1bmhhbmRsZWRSZWplY3Rpb25cIiwoZXJyLHByb21pc2UpPT57XHJcbiAgICBzZXJ2ZXIuY2xvc2UoKCk9PnByb2Nlc3MuZXhpdCgxKSk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXBwOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsV0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksUUFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssT0FBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sa0JBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLFdBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUFvQyxTQUFBRCx1QkFBQVMsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLGdCQUFBQSxDQUFBO0FBRXBDRSxrQkFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQztBQUVmLElBQU1DLEdBQUcsR0FBQyxJQUFBQyxtQkFBTyxFQUFDLENBQUM7QUFFbkIsSUFBTUMsSUFBSSxHQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsSUFBSSxJQUFJLElBQUk7QUFJbkNHLHNCQUFVLENBQUNOLE1BQU0sQ0FBQztFQUNkTyxVQUFVLEVBQUVILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxxQkFBcUI7RUFDN0NDLE9BQU8sRUFBRUwsT0FBTyxDQUFDQyxHQUFHLENBQUNLLGtCQUFrQjtFQUN2Q0MsVUFBVSxFQUFFUCxPQUFPLENBQUNDLEdBQUcsQ0FBQ08scUJBQXFCO0VBQzdDQyxNQUFNLEVBQUU7QUFDVixDQUFDLENBQUM7QUFFSlosR0FBRyxDQUFDYSxHQUFHLENBQUMsSUFBQUMsNkJBQVUsRUFBQztFQUFFQyxZQUFZLEVBQUU7QUFBSyxDQUFDLENBQUMsQ0FBQztBQUMzQ2YsR0FBRyxDQUFDYSxHQUFHLENBQUNaLG1CQUFPLENBQUNlLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDdkJoQixHQUFHLENBQUNhLEdBQUcsQ0FBQ0ksc0JBQVUsQ0FBQ0MsVUFBVSxDQUFDO0VBQUNDLFFBQVEsRUFBQztBQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hEbkIsR0FBRyxDQUFDYSxHQUFHLENBQUMsSUFBQU8sa0JBQU0sRUFBQyxNQUFNLENBQUMsQ0FBQztBQUN2QnBCLEdBQUcsQ0FBQ2EsR0FBRyxDQUFDLElBQUFRLGdCQUFJLEVBQUMsQ0FBQyxDQUFDO0FBQ2ZyQixHQUFHLENBQUNhLEdBQUcsQ0FBQ1MsbUJBQU0sQ0FBQztBQUNmLElBQU1DLE1BQU0sR0FBQ3ZCLEdBQUcsQ0FBQ3dCLE1BQU0sQ0FBQ3RCLElBQUksRUFBQ3VCLE9BQU8sQ0FBQ0MsR0FBRyx3QkFBQUMsTUFBQSxDQUF3QnpCLElBQUksQ0FBRSxDQUFDLENBQUM7QUFDeEVDLE9BQU8sQ0FBQ3lCLEVBQUUsQ0FBQyxvQkFBb0IsRUFBQyxVQUFDQyxHQUFHLEVBQUNDLE9BQU8sRUFBRztFQUMzQ1AsTUFBTSxDQUFDUSxLQUFLLENBQUM7SUFBQSxPQUFJNUIsT0FBTyxDQUFDNkIsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUFBLEVBQUM7QUFDckMsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLGNBRVlsQyxHQUFHIiwiaWdub3JlTGlzdCI6W119